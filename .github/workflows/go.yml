name: Go

on:
  push:
    branches: [ "main" ]
    tags: '*'
  pull_request:
    branches: [ "main" ]
 


jobs:
  golangci:
    strategy:
      matrix:
        go-version: [1.18.x]
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go }}
      - uses: actions/checkout@v3
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          # Optional: version of golangci-lint to use in form of v1.2 or v1.2.3 or `latest` to use the latest version
          version: v1.37.1

          # Optional: working directory, useful for monorepos
          # working-directory: somedir

          # Optional: golangci-lint command line arguments.
          # args: --issues-exit-code=0

          # Optional: show only new issues if it's a pull request. The default value is `false`.
          # only-new-issues: true

          # Optional: if set to true then the all caching functionality will be complete disabled,
          #           takes precedence over all other caching options.
          # skip-cache: true

          # Optional: if set to true then the action don't cache or restore ~/go/pkg.
          # skip-pkg-cache: true

          # Optional: if set to true then the action don't cache or restore ~/.cache/go-build.
          # skip-build-cache: true
  
  coverage:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.18'
      - name: Install ghostscript
        run: |
          brew update
          brew install ghostscript
      - name: Run coverage
        run: go test ./... -race -coverprofile=coverage.txt -covermode=atomic
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
  
  coverage2:
    runs-on: macos-latest
    steps:
      - name: Install Go
        if: success()
        uses: actions/setup-go@v2
        with:
          go-version: 1.18.x
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Calc coverage
        run: |
          go test -v -covermode=count -coverprofile=coverage.out
      - name: Convert coverage.out to coverage.lcov
        uses: jandelgado/gcov2lcov-action@v1.0.6
      - name: Coveralls
        uses: coverallsapp/github-action@v1.1.2
        with:
          github-token: ${{ secrets.github_token }}
          path-to-lcov: coverage.lcov

  build:
    strategy:
      matrix:
        go-version: [1.18.x]
        os: [macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ matrix.go-version }}
    - uses: actions/checkout@v3

    - name: Build
      run: go build -v ./...
    
    - name: Vet
      run: go vet ./...
      
    - name: Test
      run: |
       go test -v ./internal/...
       go test -v ./pkg/request/...

  # workflow name
  goreleaser:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      -
        name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      -
        name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v3
        if: startsWith(github.ref, 'refs/tags/')
        with:
          # either 'goreleaser' (default) or 'goreleaser-pro'
          distribution: goreleaser
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Your GoReleaser Pro key, if you are using the 'goreleaser-pro' distribution
          # GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
